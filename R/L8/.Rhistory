library(readxl)
BankCustomer <- read_excel("Demo 1_Identifying Data Structures.xlsm"
BankCustomer <- read_excel("Demo 1_Identifying Data Structures.xlsm")
BankCustomer <- read_excel("Demo 1_Identifying Data Structures.xlsm")
View(BankCustomer)
install.packages("plyr")
library(plyr)
install.packages("e1071")
library(e1071)
setwd("/Users/abdulrahman/Desktop/data\ scientist/R/L8")
getwd()
customer_churn = read.csv("Lesson 8_Classification/Demo 1_ Support Vector Machines.csv")
View(customer_churn)
count(customer_churn$Churn)
# 483 customers have churend '1'; 2850 have not churned 0
str(customer_churn)
install.packages("plyr")
library("plyr")
customer_churn$Churn = sapply(customer_churn$Churn, factor)
str(customer_churn)
#split the data
sample_split = floor(.7 * nrow(customer_churn))
set.seed(1)
training = sample(seq_len(nrow(customer_churn)), size= sample_split)
churn_train = customer_churn[training, ]
churn_test  = customer_churn[-training, ]
# support vector machine
install.packages("e1071")
library(e1071)
install.packages("plyr")
install.packages("e1071")
svm_churn = svm(Churn ~ ., churn_train)
library(caret
)
library(caret)
install.packages("caret")
library(caret)
confusionMatrix(churn_train$Churn, predict(svm_churn),positive = '1')
?tune
Prediction = prediction(svm_churn, churn_test[-1])
Prediction = pred(svm_churn, churn_test[-1])
library(ipred)
Prediction = pred(svm_churn, churn_test[-1])
Prediction = predict(svm_churn, churn_test[-1])
Prediction_results = table(pred=Prediction, true = churn_test[,1])
print(Prediction_results)
setwd("/Users/abdulrahman/Desktop/data\ scientist/R/L8")
getwd()
install.packages('mlbench')
library(e1071)
library(plyr)
library(caret)
library(mlbench)
band_loan = read.csv("Lesson 8_Classification/Demo 2_ Naive Bayes Classifier.csv")
View(bank_loan)
band_loan = read.csv("Lesson 8_Classification/Demo 2_ Naive Bayes Classifier.csv")
getwd()
band_loan = read.csv("Lesson 8_Classification/Demo 2_ Naive Bayes Classifier.csv")
View(bank_loan)
View(band_loan)
str(band_loan)
band_loan$Default = sapply(band_loan$Default, factor)
str(band_loan)
naive_model = naiveBayes(Default ~., data = band_loan)
print(naive_model)
naive_predict = predict(naive_model, band_loan)
naive_predict
table(naive_predict, band_loan$Default)
#domo 2 naive byes
setwd("/Users/abdulrahman/Desktop/data\ scientist/R/L8")
getwd()
install.packages('repart')
library(e1071)
library(plyr)
library(caret)
library(mlbench)
library(repart)
install.packages('repart', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('repart',repos='http://cran.us.r-project.org')
install.packages('rpart')
install.packages("rpart")
library(e1071)
library(plyr)
library(caret)
library(mlbench)
library(repart)
library(rpart)
band_loan = read.csv("Lesson 8_Classification/Demo 3_ Decision Tree Classification.csv")
setwd("/Users/abdulrahman/Desktop/data\ scientist/R/L8")
getwd()
library(e1071)
library(plyr)
library(caret)
library(mlbench)
library(rpart)
#load band data
band_loan = read.csv("Lesson 8_Classification/Demo 3_ Decision Tree Classification.csv")
View(band_loan)
str(band_loan)
band_loan$Default = sapply(band_loan$Default, factor)
str(band_loan)
tree_model = rpart(Default ~ ., data = band_loan, method = 'class')
tree_model
#analyze results
printcp(tree_model)
plotcp(tree_model)
print(tree_model)
summary(tree_model)
plot(tree_model)
setwd("/Users/abdulrahman/Desktop/data\ scientist/R/L8")
getwd()
library(plyr)
library(caret)
band_loan = read.csv("Lesson 8_Classification/Demo 4_K-Fold Cross validation.csv")
View(band_loan)
str(band_loan)
band_loan$Default = sapply(band_loan$Default, factor)
str(band_loan)
band_loan = read.csv("Lesson 8_Classification/Demo 2_ Naive Bayes Classifier.csv")
View(band_loan)
str(band_loan)
band_loan$Default = sapply(band_loan$Default, factor)
str(band_loan)
#domo 2 naive byes
setwd("/Users/abdulrahman/Desktop/data\ scientist/R/L8")
getwd()
library(e1071)
library(plyr)
library(caret)
library(mlbench)
library(rpart)
#load band data
band_loan = read.csv("Lesson 8_Classification/Demo 3_ Decision Tree Classification.csv")
View(band_loan)
str(band_loan)
#convert default varible
band_loan$Default = sapply(band_loan$Default, factor)
str(band_loan)
#build the model
tree_model = rpart(Default ~ ., data = band_loan, method = 'class')
tree_model
#analyze results
printcp(tree_model)
plotcp(tree_model)
print(tree_model)
summary(tree_model)
plot(tree_model)
# folded_up
fulded_up = createFolds(band_loan, k= 10 , list = TRUE, returnTrain = FALSE)
# folded_up
folded_up = createFolds(band_loan, k= 10 , list = TRUE, returnTrain = FALSE)
train_set = names(folded_up)
library(mlbench)
train_set = names(folded_up[1])
band_loan[folded_up$train_set,]
